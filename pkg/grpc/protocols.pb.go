// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: protocols.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// リクエストメッセージの定義
type ChatCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model                    string             `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Prompt                   string             `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	BestOf                   int32              `protobuf:"varint,3,opt,name=best_of,json=bestOf,proto3" json:"best_of,omitempty"`
	Echo                     bool               `protobuf:"varint,4,opt,name=echo,proto3" json:"echo,omitempty"`
	FrequencyPenalty         float64            `protobuf:"fixed64,5,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	LogitBias                map[string]float64 `protobuf:"bytes,6,rep,name=logit_bias,json=logitBias,proto3" json:"logit_bias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Logprobs                 int32              `protobuf:"varint,7,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	MaxTokens                int32              `protobuf:"varint,8,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	N                        int32              `protobuf:"varint,9,opt,name=n,proto3" json:"n,omitempty"`
	PresencePenalty          float64            `protobuf:"fixed64,10,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	Stop                     []string           `protobuf:"bytes,11,rep,name=stop,proto3" json:"stop,omitempty"`
	Stream                   bool               `protobuf:"varint,12,opt,name=stream,proto3" json:"stream,omitempty"`
	Suffix                   string             `protobuf:"bytes,13,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Temperature              float64            `protobuf:"fixed64,14,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TopP                     float64            `protobuf:"fixed64,15,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	User                     string             `protobuf:"bytes,16,opt,name=user,proto3" json:"user,omitempty"`
	Preset                   string             `protobuf:"bytes,17,opt,name=preset,proto3" json:"preset,omitempty"`
	MinP                     float64            `protobuf:"fixed64,18,opt,name=min_p,json=minP,proto3" json:"min_p,omitempty"`
	DynamicTemperature       bool               `protobuf:"varint,19,opt,name=dynamic_temperature,json=dynamicTemperature,proto3" json:"dynamic_temperature,omitempty"`
	DynatempLow              float64            `protobuf:"fixed64,20,opt,name=dynatemp_low,json=dynatempLow,proto3" json:"dynatemp_low,omitempty"`
	DynatempHigh             float64            `protobuf:"fixed64,21,opt,name=dynatemp_high,json=dynatempHigh,proto3" json:"dynatemp_high,omitempty"`
	DynatempExponent         float64            `protobuf:"fixed64,22,opt,name=dynatemp_exponent,json=dynatempExponent,proto3" json:"dynatemp_exponent,omitempty"`
	SmoothingFactor          float64            `protobuf:"fixed64,23,opt,name=smoothing_factor,json=smoothingFactor,proto3" json:"smoothing_factor,omitempty"`
	TopK                     int32              `protobuf:"varint,24,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	RepetitionPenalty        float64            `protobuf:"fixed64,25,opt,name=repetition_penalty,json=repetitionPenalty,proto3" json:"repetition_penalty,omitempty"`
	RepetitionPenaltyRange   int32              `protobuf:"varint,26,opt,name=repetition_penalty_range,json=repetitionPenaltyRange,proto3" json:"repetition_penalty_range,omitempty"`
	TypicalP                 float64            `protobuf:"fixed64,27,opt,name=typical_p,json=typicalP,proto3" json:"typical_p,omitempty"`
	Tfs                      float64            `protobuf:"fixed64,28,opt,name=tfs,proto3" json:"tfs,omitempty"`
	TopA                     float64            `protobuf:"fixed64,29,opt,name=top_a,json=topA,proto3" json:"top_a,omitempty"`
	EpsilonCutoff            float64            `protobuf:"fixed64,30,opt,name=epsilon_cutoff,json=epsilonCutoff,proto3" json:"epsilon_cutoff,omitempty"`
	EtaCutoff                float64            `protobuf:"fixed64,31,opt,name=eta_cutoff,json=etaCutoff,proto3" json:"eta_cutoff,omitempty"`
	GuidanceScale            float64            `protobuf:"fixed64,32,opt,name=guidance_scale,json=guidanceScale,proto3" json:"guidance_scale,omitempty"`
	NegativePrompt           string             `protobuf:"bytes,33,opt,name=negative_prompt,json=negativePrompt,proto3" json:"negative_prompt,omitempty"`
	PenaltyAlpha             float64            `protobuf:"fixed64,34,opt,name=penalty_alpha,json=penaltyAlpha,proto3" json:"penalty_alpha,omitempty"`
	MirostatMode             int32              `protobuf:"varint,35,opt,name=mirostat_mode,json=mirostatMode,proto3" json:"mirostat_mode,omitempty"`
	MirostatTau              float64            `protobuf:"fixed64,36,opt,name=mirostat_tau,json=mirostatTau,proto3" json:"mirostat_tau,omitempty"`
	MirostatEta              float64            `protobuf:"fixed64,37,opt,name=mirostat_eta,json=mirostatEta,proto3" json:"mirostat_eta,omitempty"`
	TemperatureLast          bool               `protobuf:"varint,38,opt,name=temperature_last,json=temperatureLast,proto3" json:"temperature_last,omitempty"`
	DoSample                 bool               `protobuf:"varint,39,opt,name=do_sample,json=doSample,proto3" json:"do_sample,omitempty"`
	Seed                     int32              `protobuf:"varint,40,opt,name=seed,proto3" json:"seed,omitempty"`
	EncoderRepetitionPenalty float64            `protobuf:"fixed64,41,opt,name=encoder_repetition_penalty,json=encoderRepetitionPenalty,proto3" json:"encoder_repetition_penalty,omitempty"`
	NoRepeatNgramSize        int32              `protobuf:"varint,42,opt,name=no_repeat_ngram_size,json=noRepeatNgramSize,proto3" json:"no_repeat_ngram_size,omitempty"`
	MinLength                int32              `protobuf:"varint,43,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	NumBeams                 int32              `protobuf:"varint,44,opt,name=num_beams,json=numBeams,proto3" json:"num_beams,omitempty"`
	LengthPenalty            float64            `protobuf:"fixed64,45,opt,name=length_penalty,json=lengthPenalty,proto3" json:"length_penalty,omitempty"`
	EarlyStopping            bool               `protobuf:"varint,46,opt,name=early_stopping,json=earlyStopping,proto3" json:"early_stopping,omitempty"`
	TruncationLength         int32              `protobuf:"varint,47,opt,name=truncation_length,json=truncationLength,proto3" json:"truncation_length,omitempty"`
	MaxTokensSecond          int32              `protobuf:"varint,48,opt,name=max_tokens_second,json=maxTokensSecond,proto3" json:"max_tokens_second,omitempty"`
	PromptLookupNumTokens    int32              `protobuf:"varint,49,opt,name=prompt_lookup_num_tokens,json=promptLookupNumTokens,proto3" json:"prompt_lookup_num_tokens,omitempty"`
	CustomTokenBans          string             `protobuf:"bytes,50,opt,name=custom_token_bans,json=customTokenBans,proto3" json:"custom_token_bans,omitempty"`
	SamplerPriority          []string           `protobuf:"bytes,51,rep,name=sampler_priority,json=samplerPriority,proto3" json:"sampler_priority,omitempty"`
	AutoMaxNewTokens         bool               `protobuf:"varint,52,opt,name=auto_max_new_tokens,json=autoMaxNewTokens,proto3" json:"auto_max_new_tokens,omitempty"`
	BanEosToken              bool               `protobuf:"varint,53,opt,name=ban_eos_token,json=banEosToken,proto3" json:"ban_eos_token,omitempty"`
	AddBosToken              bool               `protobuf:"varint,54,opt,name=add_bos_token,json=addBosToken,proto3" json:"add_bos_token,omitempty"`
	SkipSpecialTokens        bool               `protobuf:"varint,55,opt,name=skip_special_tokens,json=skipSpecialTokens,proto3" json:"skip_special_tokens,omitempty"`
	GrammarString            string             `protobuf:"bytes,56,opt,name=grammar_string,json=grammarString,proto3" json:"grammar_string,omitempty"`
}

func (x *ChatCompletionRequest) Reset() {
	*x = ChatCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionRequest) ProtoMessage() {}

func (x *ChatCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionRequest.ProtoReflect.Descriptor instead.
func (*ChatCompletionRequest) Descriptor() ([]byte, []int) {
	return file_protocols_proto_rawDescGZIP(), []int{0}
}

func (x *ChatCompletionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ChatCompletionRequest) GetBestOf() int32 {
	if x != nil {
		return x.BestOf
	}
	return 0
}

func (x *ChatCompletionRequest) GetEcho() bool {
	if x != nil {
		return x.Echo
	}
	return false
}

func (x *ChatCompletionRequest) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetLogitBias() map[string]float64 {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

func (x *ChatCompletionRequest) GetLogprobs() int32 {
	if x != nil {
		return x.Logprobs
	}
	return 0
}

func (x *ChatCompletionRequest) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *ChatCompletionRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *ChatCompletionRequest) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ChatCompletionRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *ChatCompletionRequest) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ChatCompletionRequest) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ChatCompletionRequest) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *ChatCompletionRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ChatCompletionRequest) GetPreset() string {
	if x != nil {
		return x.Preset
	}
	return ""
}

func (x *ChatCompletionRequest) GetMinP() float64 {
	if x != nil {
		return x.MinP
	}
	return 0
}

func (x *ChatCompletionRequest) GetDynamicTemperature() bool {
	if x != nil {
		return x.DynamicTemperature
	}
	return false
}

func (x *ChatCompletionRequest) GetDynatempLow() float64 {
	if x != nil {
		return x.DynatempLow
	}
	return 0
}

func (x *ChatCompletionRequest) GetDynatempHigh() float64 {
	if x != nil {
		return x.DynatempHigh
	}
	return 0
}

func (x *ChatCompletionRequest) GetDynatempExponent() float64 {
	if x != nil {
		return x.DynatempExponent
	}
	return 0
}

func (x *ChatCompletionRequest) GetSmoothingFactor() float64 {
	if x != nil {
		return x.SmoothingFactor
	}
	return 0
}

func (x *ChatCompletionRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *ChatCompletionRequest) GetRepetitionPenalty() float64 {
	if x != nil {
		return x.RepetitionPenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetRepetitionPenaltyRange() int32 {
	if x != nil {
		return x.RepetitionPenaltyRange
	}
	return 0
}

func (x *ChatCompletionRequest) GetTypicalP() float64 {
	if x != nil {
		return x.TypicalP
	}
	return 0
}

func (x *ChatCompletionRequest) GetTfs() float64 {
	if x != nil {
		return x.Tfs
	}
	return 0
}

func (x *ChatCompletionRequest) GetTopA() float64 {
	if x != nil {
		return x.TopA
	}
	return 0
}

func (x *ChatCompletionRequest) GetEpsilonCutoff() float64 {
	if x != nil {
		return x.EpsilonCutoff
	}
	return 0
}

func (x *ChatCompletionRequest) GetEtaCutoff() float64 {
	if x != nil {
		return x.EtaCutoff
	}
	return 0
}

func (x *ChatCompletionRequest) GetGuidanceScale() float64 {
	if x != nil {
		return x.GuidanceScale
	}
	return 0
}

func (x *ChatCompletionRequest) GetNegativePrompt() string {
	if x != nil {
		return x.NegativePrompt
	}
	return ""
}

func (x *ChatCompletionRequest) GetPenaltyAlpha() float64 {
	if x != nil {
		return x.PenaltyAlpha
	}
	return 0
}

func (x *ChatCompletionRequest) GetMirostatMode() int32 {
	if x != nil {
		return x.MirostatMode
	}
	return 0
}

func (x *ChatCompletionRequest) GetMirostatTau() float64 {
	if x != nil {
		return x.MirostatTau
	}
	return 0
}

func (x *ChatCompletionRequest) GetMirostatEta() float64 {
	if x != nil {
		return x.MirostatEta
	}
	return 0
}

func (x *ChatCompletionRequest) GetTemperatureLast() bool {
	if x != nil {
		return x.TemperatureLast
	}
	return false
}

func (x *ChatCompletionRequest) GetDoSample() bool {
	if x != nil {
		return x.DoSample
	}
	return false
}

func (x *ChatCompletionRequest) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *ChatCompletionRequest) GetEncoderRepetitionPenalty() float64 {
	if x != nil {
		return x.EncoderRepetitionPenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetNoRepeatNgramSize() int32 {
	if x != nil {
		return x.NoRepeatNgramSize
	}
	return 0
}

func (x *ChatCompletionRequest) GetMinLength() int32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *ChatCompletionRequest) GetNumBeams() int32 {
	if x != nil {
		return x.NumBeams
	}
	return 0
}

func (x *ChatCompletionRequest) GetLengthPenalty() float64 {
	if x != nil {
		return x.LengthPenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetEarlyStopping() bool {
	if x != nil {
		return x.EarlyStopping
	}
	return false
}

func (x *ChatCompletionRequest) GetTruncationLength() int32 {
	if x != nil {
		return x.TruncationLength
	}
	return 0
}

func (x *ChatCompletionRequest) GetMaxTokensSecond() int32 {
	if x != nil {
		return x.MaxTokensSecond
	}
	return 0
}

func (x *ChatCompletionRequest) GetPromptLookupNumTokens() int32 {
	if x != nil {
		return x.PromptLookupNumTokens
	}
	return 0
}

func (x *ChatCompletionRequest) GetCustomTokenBans() string {
	if x != nil {
		return x.CustomTokenBans
	}
	return ""
}

func (x *ChatCompletionRequest) GetSamplerPriority() []string {
	if x != nil {
		return x.SamplerPriority
	}
	return nil
}

func (x *ChatCompletionRequest) GetAutoMaxNewTokens() bool {
	if x != nil {
		return x.AutoMaxNewTokens
	}
	return false
}

func (x *ChatCompletionRequest) GetBanEosToken() bool {
	if x != nil {
		return x.BanEosToken
	}
	return false
}

func (x *ChatCompletionRequest) GetAddBosToken() bool {
	if x != nil {
		return x.AddBosToken
	}
	return false
}

func (x *ChatCompletionRequest) GetSkipSpecialTokens() bool {
	if x != nil {
		return x.SkipSpecialTokens
	}
	return false
}

func (x *ChatCompletionRequest) GetGrammarString() string {
	if x != nil {
		return x.GrammarString
	}
	return ""
}

// レスポンスメッセージの定義
type ChatCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Choices []*Choice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	Created int64     `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model   string    `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Object  string    `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	Usage   *Usage    `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *ChatCompletionResponse) Reset() {
	*x = ChatCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponse) ProtoMessage() {}

func (x *ChatCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponse.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponse) Descriptor() ([]byte, []int) {
	return file_protocols_proto_rawDescGZIP(), []int{1}
}

func (x *ChatCompletionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatCompletionResponse) GetChoices() []*Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ChatCompletionResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChatCompletionResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ChatCompletionResponse) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// Choiceメッセージの定義
type Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // 応答メッセージを持つフィールド
}

func (x *Choice) Reset() {
	*x = Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Choice) ProtoMessage() {}

func (x *Choice) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Choice.ProtoReflect.Descriptor instead.
func (*Choice) Descriptor() ([]byte, []int) {
	return file_protocols_proto_rawDescGZIP(), []int{2}
}

func (x *Choice) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Usageメッセージの定義
type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptTokens     int32 `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	CompletionTokens int32 `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	TotalTokens      int32 `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_protocols_proto_rawDescGZIP(), []int{3}
}

func (x *Usage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *Usage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *Usage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

// エラーレスポンスの定義
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail []*ErrorDetail `protobuf:"bytes,1,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_protocols_proto_rawDescGZIP(), []int{4}
}

func (x *ErrorResponse) GetDetail() []*ErrorDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type ErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loc  []string `protobuf:"bytes,1,rep,name=loc,proto3" json:"loc,omitempty"`
	Msg  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Type string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_protocols_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorDetail) GetLoc() []string {
	if x != nil {
		return x.Loc
	}
	return nil
}

func (x *ErrorDetail) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ErrorDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_protocols_proto protoreflect.FileDescriptor

var file_protocols_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x22, 0x9f, 0x10, 0x0a, 0x15, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63,
	0x68, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x50, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x79, 0x6e,
	0x61, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x77, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x79, 0x6e, 0x61, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x65, 0x6d, 0x70, 0x48, 0x69, 0x67,
	0x68, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x79,
	0x6e, 0x61, 0x74, 0x65, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x5f, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x18, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x79, 0x70, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x66, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x74, 0x66, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x41, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x43, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x74, 0x61, 0x43, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x72, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d,
	0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x75, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x54, 0x61, 0x75, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x65, 0x74, 0x61, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x45, 0x74,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x1a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x6e,
	0x6f, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x4e, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x62, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4e,
	0x75, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x6f, 0x4d, 0x61, 0x78, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x5f, 0x65, 0x6f, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x45, 0x6f, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x62, 0x6f, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x42, 0x6f,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x16,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1c, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7c, 0x0a, 0x05, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x45, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x66,
	0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocols_proto_rawDescOnce sync.Once
	file_protocols_proto_rawDescData = file_protocols_proto_rawDesc
)

func file_protocols_proto_rawDescGZIP() []byte {
	file_protocols_proto_rawDescOnce.Do(func() {
		file_protocols_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocols_proto_rawDescData)
	})
	return file_protocols_proto_rawDescData
}

var file_protocols_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_protocols_proto_goTypes = []interface{}{
	(*ChatCompletionRequest)(nil),  // 0: openai.ChatCompletionRequest
	(*ChatCompletionResponse)(nil), // 1: openai.ChatCompletionResponse
	(*Choice)(nil),                 // 2: openai.Choice
	(*Usage)(nil),                  // 3: openai.Usage
	(*ErrorResponse)(nil),          // 4: openai.ErrorResponse
	(*ErrorDetail)(nil),            // 5: openai.ErrorDetail
	nil,                            // 6: openai.ChatCompletionRequest.LogitBiasEntry
}
var file_protocols_proto_depIdxs = []int32{
	6, // 0: openai.ChatCompletionRequest.logit_bias:type_name -> openai.ChatCompletionRequest.LogitBiasEntry
	2, // 1: openai.ChatCompletionResponse.choices:type_name -> openai.Choice
	3, // 2: openai.ChatCompletionResponse.usage:type_name -> openai.Usage
	5, // 3: openai.ErrorResponse.detail:type_name -> openai.ErrorDetail
	0, // 4: openai.OpenAIService.CreateChatCompletion:input_type -> openai.ChatCompletionRequest
	1, // 5: openai.OpenAIService.CreateChatCompletion:output_type -> openai.ChatCompletionResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_protocols_proto_init() }
func file_protocols_proto_init() {
	if File_protocols_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocols_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocols_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocols_proto_goTypes,
		DependencyIndexes: file_protocols_proto_depIdxs,
		MessageInfos:      file_protocols_proto_msgTypes,
	}.Build()
	File_protocols_proto = out.File
	file_protocols_proto_rawDesc = nil
	file_protocols_proto_goTypes = nil
	file_protocols_proto_depIdxs = nil
}
