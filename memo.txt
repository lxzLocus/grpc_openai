# protocコマンドでコードを生成する
```
$ cd api
$ protoc --go_out=../pkg/grpc --go_opt=paths=source_relative --go-grpc_out=../pkg/grpc --go-grpc_opt=paths=source_relative protocols.proto
```


# TIPS
```
protocコマンドにつけていたオプションはそれぞれ以下の通りです。

--go_out: hello.pb.goファイルの出力先ディレクトリを指定
--go_opt: hello.pb.goファイル生成時のオプション。
今回はpaths=source_relativeを指定して--go_outオプションでの指定が相対パスであることを明示

--go-grpc_out: hello_grpc.pb.goファイルの出力先ディレクトリを指定
--go-grpc_opt: hello_grpc.pb.goファイル生成時のオプション。
今回はpaths=source_relativeを指定して--go-grpc_outオプションでの指定が相対パスであることを明示
```


# サーバーの起動
```
$ cd cmd/server
$ go run main.go
```

# サーバー内に実装されているサービス一覧の確認
```
$ grpcurl -plaintext localhost:8080 list
```

# サービスのメソッド一覧確認
```
$ grpcurl -plaintext localhost:8080 list openai.OpenAIService
```

# メソッド呼び出し
```
$ grpcurl -plaintext -d '{"prompt": "create simple python sample code"}' localhost:8080 openai.OpenAIService
```

# !!!!!!!
サービスが登録されていない
```
Error invoking method "openai.OpenAIService": target server does not expose service "openai"
```





grpcurl -plaintext -d '{
        'prompt': 'create simple python sample code',
        'max_tokens': 4096,
		'temperature': 0.7,
		'temperature_last': false,
		'dynamic_temperature': false,
		'dynatemp_low': 1,
		'dynatemp_high': 1,
		'dynatemp_exponent': 1,
		'smoothing_factor': 0,
		'top_p': 0.9,
		'min_p': 0,
		'top_k': 20,
		'repetition_penalty': 1.15,
		'presence_penalty': 0,
		'frequency_penalty': 0,
		'repetition_penalty_range': 1024,
		'typical_p': 1,
		'tfs': 1,
		'top_a': 0,
		'epsilon_cutoff': 0,
		'eta_cutoff': 0,
		'guidance_scale': 1,
		'penalty_alpha': 0,
		'mirostat_mode': 0,
		'mirostat_tau': 5,
		'mirostat_eta': 0.1,
		'do_sample': true,
		'seed': -1,
		'encoder_repetition_penalty': 1,
		'no_repeat_ngram_size': 0,
		'min_length': 0,
		'num_beams': 1,
		'length_penalty': 1,
		'early_stopping': false
}' localhost:8080 openai.OpenAIService/CreateChatCompletion

